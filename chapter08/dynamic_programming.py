# 다이나믹 프로그래밍(dynamic programming)(동적 계획법):
# 다이나믹 프로그래밍 => 탑다운, 보텀업방식
# 중복되는 연산을 줄이자.
# 메모리 공간을 더 사용하여 연산속도를 비약적으로 증가시킴.
# 조건:
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

# 대표적인 방식
# 피보나치 함수 소스 코드

# 피보나치 함수(Fibonacci Function)를 재귀 함수로 구현
def fibo(x):
    if x == 1 or x == 2:
        return 1
    else:
        return fibo(x - 1) + fibo(x - 2)


print(fibo(4))

# 다이나믹 프로그래밍을 구현하는 방법: 메모이제아션(Memoization) 기법, 캐싱이라고도 한다.
# 메모이제이션(memoization): 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법
# 피보나치 수열 소스코드(재귀적)

# 한 번 계산된 겨로가를 메모이제이션(memoization)하기 위한 리스트 초기화
d = [0] * 100


# 피보나치 함수(Fibonacci Functino)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
# 다이나믹 프로그래밍은 분할 정복(퀵 정렬)과 다르게 문제들이 서로 영향을 미치고 있다는 점이다.
def fibo(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]


print(fibo(99))

# 재귀 함수를 사용하면 컴퓨터 시스템에서는 함수를 다시 호출했을 때 메모리 상에 적재되는 일련의 과정을 따라야 하므로 오버헤드가 발생할 수 있다.
# 따라서 재귀 함수 대신에 반복문을 사용하여 오버헤드를 줄일 수 있다. 반복문이 재귀함수에 비해 성능이 더 좋다.
# 다이나믹 프로그래밍을 적용했을 때 시간복잡도는 O(N)이다.

# 호출되는 함수 확인
d = [0] * 100


def pibo(x):
    print('f(' + str(x) + ')', end=' ')
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = pibo(x - 1) + pibo(x - 2)
    return d[x]


pibo(6)

# 피보나치 수열 소스코드(반복적)
# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n+1):
    d[i] = d[i-1] + d[i-2]

print(d[n])

